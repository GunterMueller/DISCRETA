#
# i0.g
# 
# Evi Haberberger
# January 2000
#




framework := function(Agen, korb, sol, p, param, lambda, strtex0, report, fv)

	local G, A, P, p1, n0, NGP, N_NGP_A, NGA, strn, overg, r, strtex, 
	strmp, Bcon, f, solcon, i, fuse, truesol, Bcon2, P2, NGP2, N_NGP_A2,
	res;
	
	Print("\nstart framework():\n\n");
	
	# start the creation of a latex-input file:
	
	strtex := [];
	Append(strtex, strtex0);
	Append(strtex, ".tex");
			
	if fv > 0 then
		AppendTo(report, "\n\n\\input ");
		AppendTo(report, strtex0);
		AppendTo(report, "\n\n");
	fi;
	
	Print("Generation of G = S_v and A:\n");
	G := SymmetricGroup(param[1]);
	A := Subgroup(G, Agen);
	Print("\n\nA = ", A, "\n\n");
	
	if fv > 0 then
		AppendTo(strtex, "\n\\section{Basic group}\n\n");
		AppendTo(strtex, "We prescribe the group generated by ");
		AppendTo(strtex, "\n\\begin{align*}\n");
		for i in [1..Length(Agen)] do
			AppendTo(strtex, String(Agen[i]));
			AppendTo(strtex, "\\\\\n");
		od;
		AppendTo(strtex, "\\end{align*}\n\n");
		AppendTo(strtex, "of order ");
		AppendTo(strtex, String(Size(A)));
		AppendTo(strtex, " as an automorphism group for the constructed designs.\n\n");
	fi;
	
	Print("Compute a p-Sylow subgroup P of A:\n");
	P := SylowSubgroup(A, p);
	p1 := Size(P);
	Print("size of P: ", p1, "\n");
	n0 := nu_prime(p1, p);
	
	NGP := Normalizer(G,P);
	Print("Normalizer of P in G:\n");
	Print("size of NGP: ", Size(NGP), "\n");
	
	Print("Normalizer of A in G: \n");
	N_NGP_A := Normalizer(NGP, A);
	NGA := ClosureGroup(A, N_NGP_A);
	Print("size of NGA: ", Size(NGA), "\n");
	Print("N_NGP_A is the normalizer of A in NGP:\n");
	strn := "iso_N_NGP_A.txt";
	GeneratorsPermGroup(N_NGP_A, strn, param[1]);
		
	Print("Transversal of N_NGP_A in NG(P):\n");
	r := left_transversal(NGP, N_NGP_A);	# canonical ordering (DISCRETA-program)
	Print("size of r: ", Length(r), "\n");
	
	if fv > 0 then
		AppendTo(strtex, "\\medskip\nWe have a ");
		AppendTo(strtex, String(p));
		AppendTo(strtex, "-Sylow subgroup of order ");
		AppendTo(strtex, String(Size(P)));
		AppendTo(strtex, ".\nThe normalizer of this Sylow subgroup is of order ");
		AppendTo(strtex, Size(NGP));
		AppendTo(strtex, " and the normalizer of $P$\nin $N_G(A)$ (which is the intersection of $N_G(A)$ and $N_G(P)$)\n");
		AppendTo(strtex, "has order ");
		AppendTo(strtex, String(Size(N_NGP_A)));
		AppendTo(strtex, ". This gives us a transversal of length ");
		AppendTo(strtex, String(Length(r)));
		AppendTo(strtex, ", where we can try to \ncreate overgroups from.\n\n");
	fi;
	
	strmp := "mpbase_";
	Append(strmp, strtex0);
	Append(strmp, ".txt");
	PrintTo(strmp, "");
	
	if fv > 0 then
		AppendTo(strtex, "\n\n\\subsection{Creation of overgroups}\n\n");
	fi;
	
	overg := create_overgroups(r, Agen, G, p, n0, strtex, fv);

	# now consider overgroups with the same p-Sylow subgroup as A:
	Bcon := action_by_conjugation(NGP, overg[1][1], strtex, fv);
	
	if fv > 0 then
		AppendTo(strtex, "\n\n\\subsection{Fusion process}\n\n");
	fi;
	
	f := fuse_with_overgroups(Bcon[1], korb, sol, param, lambda, strtex0, fv);
	fuse := f[5];
	truesol := f[6];
	
	solcon := sol_of_conj(Bcon, f, param, strtex, fv);
	
	
	
	
	# if Length(overg[1]) > 1 then
	# 	for i in [2..Length(overg[1])] do
	# 		Bgen := GeneratorsPermGroup(overg[1][i]);
	# 		
	# 	od;
	# fi;
	
	res := [];
	
	return res;
end;


iso_class := function(km, p, lambda, fv)

	local strtex0, strtex, str0, str1, param, G, Agen, a, f, i, no, orb, 
	korb, sol;
	
	Print("\nstart iso_class():\n\n");
	strtex0 := "isoclass_";
	Append(strtex0, km);

	strtex := [];
	Append(strtex, strtex0);
	Append(strtex, ".tex");
	PrintTo(strtex, "");

	if fv > 0 then
		shadow_latex_report(km, strtex0); 
		# creates a file "report_"strtex, where the input file is strtex
	fi;
	
	str0 := "report_";
	Append(str0, strtex0);
	
	str1 := [];
	Append(str1, str0);
	Append(str1, ".tex");
	
	if fv > 2 then
		latex_intro(str1);
	fi;
	
	# get the relevant information from the KM-file:
	
	param := get_vtk(km);
	Agen := get_generators(km);	
	no := get_number_of_solutions(km, lambda);
	sol := get_solutions(km, lambda, 0, no);
	orb := get_orbit_representatives(km);
	korb  := orb[param[3]+1];
	
	
	f := framework(Agen 		# generators of A
			, korb 		# orbits on k-subsets
			, sol 		# corresponding solutions
			, p
			, param		# [v,t,k]
			, lambda
			, strtex0	# sub-TEXfile for A, included into:
			, str1		# report-filename
			, fv		# 0: no, 1: short, 2: long report
			);

	if fv > 0 then
#		AppendTo(strtex, "\n\n\\subsection{Remaining groups to test}\n");
#		for i in [1..Length(f)] do
#			AppendTo(strtex, String(f[i]));
#		od;	
	
		latex_results(str0);			# finishes the latex report 
		create_ps_file_and_view(str0);		# starts ghostview of report		
	fi;
	Print("\nleave iso_class()\n\n");
end;
